#!/usr/bin/env python

from dataclasses import dataclass
from pathlib import Path

import git


@dataclass(frozen=True)
class RepoInfo:
    root: Path
    owner: str
    name: str

    @property
    def path(self) -> Path:
        return self.root.joinpath(self.name)

    @property
    def ssh(self) -> str:
        return f"git@github.com:{self.owner}/{self.name}.git"


def main() -> None:
    user_name = str(git.GitConfigParser().get_value("user", "name"))
    document_root = Path.home().joinpath("Documents")
    repo_root = Path.home().joinpath("dev/repos")
    open_source_plugins = repo_root.joinpath("open-source/nvim-plugins")
    repos = [
        RepoInfo(root=document_root, owner=user_name, name="notes"),
        RepoInfo(root=repo_root, owner=user_name, name="advent-of-code"),
        RepoInfo(root=repo_root, owner=user_name, name="chess"),
        RepoInfo(root=repo_root, owner=user_name, name="dashboard.nvim"),
        RepoInfo(root=repo_root, owner=user_name, name="harpoon-core.nvim"),
        RepoInfo(root=repo_root, owner=user_name, name="full-gradle-app"),
        RepoInfo(root=repo_root, owner=user_name, name="learning"),
        RepoInfo(root=repo_root, owner=user_name, name="personal-resume"),
        RepoInfo(root=repo_root, owner=user_name, name="rx-availability"),
        RepoInfo(root=repo_root, owner=user_name, name="small-apps"),
        RepoInfo(root=open_source_plugins, owner="nvimdev", name="dashboard-nvim"),
        RepoInfo(root=open_source_plugins, owner="ThePrimeagen", name="harpoon"),
    ]
    [clone(repo) for repo in repos]


def clone(repo: RepoInfo) -> bool:
    if not repo.root.is_dir():
        print(f"Creating: {repo.root}")
        repo.root.mkdir(parents=True)
    if not repo.path.is_dir():
        print(f"Cloning {repo.ssh} to {repo.path}")
        git.Repo.clone_from(repo.ssh, repo.path)
        return True
    else:
        print(f"Pulling: {repo.path}")
        git.Repo(repo.path).remote().pull()
        return False


if __name__ == "__main__":
    main()
