#!/usr/bin/env python

from dataclasses import dataclass
from functools import cache
from pathlib import Path

import git


@dataclass(frozen=True)
class Repo:
    name: str
    owner: str | None = None
    directory: str | None = None

    @property
    def ssh(self) -> str:
        owner: str = self.owner or get_user_name()
        return f"git@github.com:{owner}/{self.name}.git"

    def clone(self, root: Path) -> None:
        directory: str = self.directory or self.name
        path: Path = root.joinpath(directory)
        if not path.is_dir():
            print(f"Cloning {self.ssh} to {path}")
            repo: git.Repo = git.Repo.clone_from(self.ssh, path)
            Repo.update_submodules(repo)
        else:
            repo: git.Repo = git.Repo(path)
            changes: int = len(repo.index.diff(None)) + len(repo.untracked_files)
            local_commit: str = str(repo.head.commit)
            revision: str = f"{repo.remote().name}/{repo.active_branch.name}"
            merged_commit: str = str(repo.rev_parse(revision))
            if changes > 0:
                print(f"Found {changes} unstaged changes, not updating {path}")
            elif local_commit != merged_commit:
                print(f"Found unmerged commits, not updating {path}")
            else:
                print(f"Pulling: {path}")
                repo.remote().pull()
                Repo.update_submodules(repo)

    @staticmethod
    def update_submodules(repo: git.Repo) -> None:
        for submodule in repo.submodules:
            print(f"Updating submodule: {submodule}")
            submodule.update(init=True)


@cache
def get_user_name() -> str:
    return str(git.GitConfigParser().get_value("user", "name"))


@dataclass(frozen=True)
class RepoRoot:
    root: Path
    repos: list[Repo]

    def clone(self) -> None:
        if not self.root.is_dir():
            print(f"Creating: {self.root}")
            self.root.mkdir(parents=True)
        [repo.clone(self.root) for repo in self.repos]


def main() -> None:
    repo_roots: list[RepoRoot] = [
        RepoRoot(
            root=Path.home(),
            repos=[Repo(name="pass", directory=".password-store")],
        ),
        RepoRoot(
            root=Path.home().joinpath("Documents"),
            repos=[Repo(name="notes")],
        ),
        RepoRoot(
            root=Path.home().joinpath("dev/repos"),
            repos=[
                Repo(name="advent-of-code"),
                Repo(name="chess"),
                Repo(name="dashboard.nvim"),
                Repo(name="harpoon-core.nvim"),
                Repo(name="py-requirements.nvim"),
                Repo(name="full-gradle-app"),
                Repo(name="learning"),
                Repo(name="personal-resume"),
                Repo(name="rx-availability"),
                Repo(name="small-apps"),
            ],
        ),
        RepoRoot(
            root=Path.home().joinpath("dev/repos/open-source/nvim-plugins"),
            repos=[
                Repo(owner="nvimdev", name="dashboard-nvim"),
                Repo(owner="ThePrimeagen", name="harpoon"),
                Repo(owner="Saecki", name="crates.nvim"),
            ],
        ),
    ]
    [repo_root.clone() for repo_root in repo_roots]


if __name__ == "__main__":
    main()
