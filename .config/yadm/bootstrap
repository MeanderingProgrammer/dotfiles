#!/bin/bash

set -euo pipefail

FAIL=31
SUCCESS=32
SKIP=33
TITLE=35

notify() {
    echo -e "\033[0;${1}m${2}\033[0m"
}

has_command() {
    if [[ -x "$(command -v ${1})" ]]; then
        return 0
    else
        notify $SKIP "  skipping: missing ${1}"
        return 1
    fi
}

lib_dir="$(dirname $0)/lib"
system_type=$(uname -s)
system_os=$(uname -o)

main() {
    notify $TITLE "system: ${system_type}-${system_os}"
    if [[ "${#}" == 0 ]]; then
        do_deps
        do_mise
        do_libs
        do_repos
        do_nvim
    elif [[ "${#}" == 1 ]]; then
        case ${1} in
            "deps") do_deps ;;
            "mise") do_mise ;;
            "libs") do_libs ;;
            "repos") do_repos ;;
            "nvim") do_nvim ;;
            *)
                notify $FAIL "unknown command: ${1}"
                notify $FAIL "valid commands: deps, mise, libs, repos, nvim"
                exit 1
                ;;
        esac
    else
        notify $FAIL "usage: <command>?"
        exit 1
    fi
}

do_deps() {
    notify $TITLE "updating dependencies"

    if has_command "brew"; then
        brew bundle --file "${lib_dir}/Brewfile"
        brew update
        brew upgrade
        brew cleanup
        notify $SUCCESS "  success: brew"
    fi

    if [[ "$system_os" == "Android" ]]; then
        pkg update --yes
        pkg upgrade --yes
        notify $SUCCESS "  success: android pkg"
    elif [[ "$system_type" == "Linux" ]]; then
        local system_32="/mnt/c/Windows/System32"
        if [[ ! -d $system_32 ]]; then
            source "${lib_dir}/wezterm.sh"
        fi
        sudo apt update --yes
        sudo apt upgrade --yes
        notify $SUCCESS "  success: linux apt"
    else
        notify $SKIP "  skipping: not linux"
    fi
}

do_mise() {
    notify $TITLE "updating mise"
    if has_command "mise"; then
        RUBY_CONFIGURE_OPTS="--with-openssl-dir=$(brew --prefix openssl)" \
            mise install
        notify $SUCCESS "  success"
    fi
}

do_libs() {
    do_python() {
        notify $TITLE "updating python"
        if has_command "pip"; then
            if [[ "$system_os" != "Android" ]]; then
                pip install --upgrade pip
                pip install -r "${lib_dir}/requirements.txt"
            else
                pip install click
                pip install GitPython
                pip install requests
            fi
            notify $SUCCESS "  success"
        fi
    }

    do_rust() {
        notify $TITLE "updating rust"
        if has_command "cargo"; then
            if [[ "$system_os" != "Android" ]]; then
                cargo install aoc-cli
                notify $SUCCESS "  success"
            else
                notify $SKIP "  skipping: android"
            fi
        fi
    }

    do_node() {
        notify $TITLE "updating node"
        if has_command "npm"; then
            if [[ "$system_os" != "Android" ]]; then
                npm install -g npm
            fi
            npm install -g aws-cdk
            npm install -g neovim
            npm install -g pnpm
            npm install -g yarn
            notify $SUCCESS "  success"
        fi
    }

    do_ocaml() {
        notify $TITLE "updating ocaml"
        if has_command "opam"; then
            # https://discuss.ocaml.org/t/unable-to-install-some-packages-with-opam-on-macos/14434/6
            # https://github.com/ocaml/opam/issues/5968
            opam init --no
            opam update
            opam upgrade --yes
            notify $SUCCESS "  success"
        fi
    }

    notify $TITLE "updating libraries"
    do_python
    do_rust
    do_node
    do_ocaml
}

do_repos() {
    notify $TITLE "updating repos"
    if has_command "python"; then
        python "${lib_dir}/repos.py"
        notify $SUCCESS "  success"
    fi
}

do_nvim() {
    notify $TITLE "updating neovim"
    if has_command "nvim"; then
        nvim --headless "+Lazy! update" +qa
        nvim --headless "+TSUpdateSync" +qa
        nvim --headless "+MasonToolsUpdateSync" +qa
        notify $SUCCESS "  success"
    fi
}

main "$@"
