#!/bin/bash

set -euo pipefail

FAIL=31
SUCCESS=32
SKIP=33
TITLE=35
notify() {
    echo -e "\033[0;${1}m${2}\033[0m"
}

has_command() {
    if [[ -x "$(command -v ${1})" ]]; then
        return 0
    else
        return 1
    fi
}

system_type=$(uname -s)
system_os=$(uname -o)
notify $TITLE "System: ${system_type}-${system_os}"

script_dir=$(dirname $0)

do_deps() {
    notify $TITLE "Updating dependencies"

    if has_command "brew"; then
        brew bundle --no-lock --file "${script_dir}/Brewfile"
        brew update
        brew upgrade
        notify $SUCCESS "  Success: homebrew"
    else
        notify $SKIP "  Skipping: missing homebrew"
    fi

    if [[ "$system_os" == "Android" ]]; then
        pkg update --yes
        pkg upgrade --yes
        notify $SUCCESS "  Success: android pkg"
    elif [[ "$system_type" == "Linux" ]]; then
        wsl_sys32_path="/mnt/c/Windows/System32"
        if [[ ! -d $wsl_sys32_path ]]; then
            source "${script_dir}/wezterm.sh"
            source "${script_dir}/fonts.sh"
        fi
        sudo apt --yes update
        sudo apt --yes upgrade
        notify $SUCCESS "  Success: linux apt"
    else
        notify $SKIP "  Skipping: not linux"
    fi
}

do_asdf() {
    notify $TITLE "Updating asdf"
    if has_command "asdf"; then
        while read -r line; do
            plugin=$(echo "${line}" | cut -d' ' -f1)
            asdf plugin add "${plugin}"
        done < ~/.tool-versions
        asdf install
        notify $SUCCESS "  Success"
    else
        notify $SKIP "  Skipping: missing asdf"
    fi
}

do_libs() {
    do_python() {
        notify $TITLE "  Updating python"
        if has_command "pip"; then
            if [[ "$system_os" != "Android" ]]; then
                pip install --upgrade pip
                pip install -r ~/.config/lang/python/requirements.txt
            else
                pip install click
                pip install GitPython
                pip install requests
            fi
            notify $SUCCESS "    Success"
        else
            notify $SKIP "    Skipping: missing pip"
        fi
    }

    do_rust() {
        notify $TITLE "  Updating rust"
        if has_command "cargo"; then
            if [[ "$system_os" != "Android" ]]; then
                cargo install aoc-cli
                if has_command "asdf"; then
                    asdf reshim rust
                fi
                notify $SUCCESS "    Success"
            else
                notify $SKIP "    Skipping: android"
            fi
        else
            notify $SKIP "    Skipping: missing cargo"
        fi
    }

    do_node() {
        notify $TITLE "  Updating node"
        if has_command "npm"; then
            if [[ "$system_os" != "Android" ]]; then
                npm install -g npm
            fi
            npm install -g pnpm
            npm install -g yarn
            npm install -g neovim
            notify $SUCCESS "    Success"
        else
            notify $SKIP "    Skipping: missing npm"
        fi
    }

    do_ocaml() {
        notify $TITLE "  Updating ocaml"
        if has_command "opam"; then
            if has_command "asdf"; then
                asdf reshim opam
            fi
            # https://discuss.ocaml.org/t/unable-to-install-some-packages-with-opam-on-macos/14434/6
            opam init --no
            opam update
            opam upgrade --yes
            notify $SUCCESS "    Success"
        else
            notify $SKIP "    Skipping: missing opam"
        fi
    }

    notify $TITLE "Updating libraries"
    do_python
    do_rust
    do_node
    do_ocaml
}

do_repos() {
    notify $TITLE "Updating repos"
    if has_command "python"; then
        python "${script_dir}/setup-repos.py"
        notify $SUCCESS "  Success"
    else
        notify $SKIP "  Skipping: missing python"
    fi
}

case "${#}" in
    0)
        do_deps
        do_asdf
        do_libs
        do_repos
        ;;
    1)
        case ${1} in
            "deps")
                do_deps
                ;;
            "asdf")
                do_asdf
                ;;
            "libs")
                do_libs
                ;;
            "repos")
                do_repos
                ;;
            *)
                notify $FAIL "Unknown command: ${1}"
                notify $FAIL "Commands: deps, asdf, libs, repos"
                exit 1
                ;;
        esac
        ;;
    *)
        notify $FAIL "Usage: <command>?"
        exit 1
        ;;
esac
