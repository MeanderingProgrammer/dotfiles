#!/usr/bin/env zsh

FAIL=31
SUCCESS=32
TITLE=35
INFO=36

notify() {
    echo -e "\033[0;${1}m${2}\033[0m"
}

reload() {
    notify "${INFO}" "  reloading: zsh"
    source ~/.zshrc
}

check_cmd() {
    if command -v "${1}" > /dev/null; then
        notify "${INFO}" "  present: ${1}"
        return 0
    else
        notify "${INFO}" "  missing: ${1}"
        return 1
    fi
}

is_phone() {
    [[ $(uname -o) == "Android" ]]
}

lib_path="$(dirname $0)/lib"

main() {
    if [[ "${#}" == 0 ]]; then
        do_deps
        do_mise
        do_libs
        do_repos
        do_nvim
    elif [[ "${#}" == 1 ]]; then
        case ${1} in
            "deps") do_deps ;;
            "mise") do_mise ;;
            "libs") do_libs ;;
            "repos") do_repos ;;
            "nvim") do_nvim ;;
            *)
                notify "${FAIL}" "unknown command: ${1}"
                notify "${FAIL}" "valid commands: deps, mise, libs, repos, nvim"
                exit 1
                ;;
        esac
    else
        notify "${FAIL}" "usage: <command>?"
        exit 1
    fi
}

do_deps() {
    notify "${TITLE}" "start: dependencies"
    reload

    notify "${TITLE}" "dependency: brew"
    if check_cmd "brew"; then
        brew bundle --file "${lib_path}/Brewfile"
        brew update
        brew upgrade
        brew cleanup
        notify "${SUCCESS}" "  success"
    fi

    notify "${TITLE}" "dependency: tools"
    if check_cmd "pkg"; then
        pkg update --yes
        pkg upgrade --yes
        pkg clean
        notify "${SUCCESS}" "  success"
    elif check_cmd "apt"; then
        sudo apt update --yes
        sudo apt upgrade --yes
        sudo apt autoremove --yes && sudo apt clean
        notify "${SUCCESS}" "  success"
    fi

    notify "${TITLE}" "dependency: applications"
    if ! is_phone && ! check_cmd "wslinfo"; then
        if check_cmd "apt"; then
            source "${lib_path}/wezterm.zsh"
        fi
        if check_cmd "snap"; then
            sudo snap install ghostty --classic
        fi
        if check_cmd "pacman"; then
            sudo pacman -Syu --needed --noconfirm - < "${lib_path}/pacman.txt"
        fi
    fi
}

do_mise() {
    notify "${TITLE}" "start: mise"
    reload

    if check_cmd "mise"; then
        RUBY_CONFIGURE_OPTS="--with-openssl-dir=$(brew --prefix openssl)" \
            mise install
        notify "${SUCCESS}" "  success"
    fi
}

do_libs() {
    notify "${TITLE}" "start: libraries"
    reload

    notify "${TITLE}" "library: python"
    if check_cmd "pip"; then
        if ! is_phone; then
            pip install --upgrade pip
            pip install -r "${lib_path}/requirements.txt"
        else
            pip install click
            pip install GitPython
            pip install pydantic
            pip install requests
        fi
        notify "${SUCCESS}" "  success"
    fi

    notify "${TITLE}" "library: rust"
    if check_cmd "cargo"; then
        if ! is_phone; then
            cargo install aoc-cli
        fi
        notify "${SUCCESS}" "  success"
    fi

    notify "${TITLE}" "library: node"
    if check_cmd "npm"; then
        if ! is_phone; then
            npm install -g npm
        fi
        npm install -g aws-cdk
        npm install -g neovim
        npm install -g pnpm
        npm install -g yarn
        notify "${SUCCESS}" "  success"
    fi

    notify "${TITLE}" "library: ocaml"
    if check_cmd "opam"; then
        # https://discuss.ocaml.org/t/unable-to-install-some-packages-with-opam-on-macos/14434/6
        # https://github.com/ocaml/opam/issues/5968
        opam init --no
        opam update
        opam upgrade --yes
        notify "${SUCCESS}" "  success"
    fi
}

do_repos() {
    notify "${TITLE}" "start: repos"
    reload

    if check_cmd "python"; then
        python "${lib_path}/repos.py"
        notify "${SUCCESS}" "  success"
    fi
}

do_nvim() {
    notify "${TITLE}" "start: neovim"
    reload

    if check_cmd "nvim"; then
        nvim --headless "+Lazy! update" +qa
        nvim --headless "+TSUpdateSync" +qa
        nvim --headless "+MasonToolsUpdateSync" +qa
        notify "${SUCCESS}" "  success"
    fi
}

main "$@"
