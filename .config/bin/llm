#!/usr/bin/env python

import json
from dataclasses import dataclass
from pathlib import Path
from typing import Any

import click
import requests


@dataclass(frozen=True)
class Ollama:
    model: str = "gpt-oss"
    port: int = 11434

    @property
    def endpoint(self) -> str:
        return f"http://127.0.0.1:{self.port}"

    def update(self) -> None:
        self.stream("pull", dict(), "status", "\n")

    def run(self, prompt: list[str]) -> None:
        self.stream("generate", dict(prompt="\n\n".join(prompt)), "response", "")

    def stream(self, cmd: str, data: dict[str, Any], key: str, end: str) -> None:
        response = requests.post(
            f"{self.endpoint}/api/{cmd}",
            json=dict(model=self.model) | data,
            stream=True,
        )
        assert response.status_code == 200, f"ollama failed: {cmd}"
        for line in response.iter_lines():
            chunk = json.loads(line.decode("utf-8"))
            print(chunk[key], end=end, flush=True)


@click.group()
def cli() -> None:
    """Interact with llm: ollama serve"""
    pass


@cli.command()
def update() -> None:
    """Update / install the current model"""
    Ollama().update()


@cli.command()
@click.argument("input", type=str)
def prompt(input: str) -> None:
    """Passes prompt directly to llm"""
    Ollama().run([input])


@cli.command()
@click.argument("file", type=Path)
def cr(file: Path) -> None:
    """Provides a code review for an input file"""
    assert file.is_file(), "Input must be a valid file"
    Ollama().run(["Can you provide a code review for the following:", file.read_text()])


@cli.command()
@click.argument("language", type=str)
@click.argument("file", type=Path)
def rewrite(language: str, file: Path) -> None:
    """Rewrite the input file to specified language"""
    assert file.is_file(), "Input must be a valid file"
    Ollama().run([f"Can you rewrite the folowing to {language}:", file.read_text()])


if __name__ == "__main__":
    cli()
