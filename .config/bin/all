#!/usr/bin/env python

import subprocess
import sys
from dataclasses import dataclass
from pathlib import Path

Result = dict[str, list[str]]


@dataclass
class Column:
    name: str
    width: int

    def __init__(self, name: str) -> None:
        self.name = name
        self.width = len(name)

    def title(self) -> str:
        return self.name.ljust(self.width)

    def update(self, result: Result) -> None:
        widths = [len(line) for line in result[self.name]]
        self.width = max(self.width, max(widths))

    def get(self, result: Result, i: int) -> str:
        lines = result[self.name]
        s = lines[i] if i < len(lines) else ""
        return s.ljust(self.width)


@dataclass(frozen=True)
class Schema:
    columns: list[Column]

    def pretty_print(self, results: list[Result]) -> None:
        for result in results:
            for column in self.columns:
                column.update(result)
        print(self.delim("┌", "┬", "┐"))
        print(self.title())
        for result in results:
            print(self.delim("├", "┼", "┤"))
            print(self.row(result))
        print(self.delim("└", "┴", "┘"))

    def delim(self, left: str, center: str, right: str) -> str:
        parts: list[str] = []
        for column in self.columns:
            parts.append("─" * (column.width + 2))
        return left + center.join(parts) + right

    def title(self) -> str:
        result: Result = dict()
        for column in self.columns:
            result[column.name] = [column.title()]
        return self.row(result)

    def row(self, result: Result) -> str:
        n = max([len(lines) for lines in result.values()])
        lines: list[str] = []
        for i in range(n):
            parts: list[str] = []
            for column in self.columns:
                parts.append(column.get(result, i))
            line = "│ " + " │ ".join(parts) + " │"
            lines.append(line)
        return "\n".join(lines)


def main(args: list[str]) -> None:
    cmd = ["git"] + args

    directories: list[Path] = []
    for repo in Path().rglob(".git"):
        if repo.stat().st_size > 0:
            directories.append(repo.parent)
    directories.sort()

    results: list[Result] = []
    for directory in directories:
        result: Result = dict(
            directory=[str(directory)],
            output=run(cmd, directory),
        )
        results.append(result)

    print(f"outputs of command: '{' '.join(cmd)}'")
    schema = Schema([Column("directory"), Column("output")])
    schema.pretty_print(results)


def run(cmd: list[str], directory: Path) -> list[str]:
    result = subprocess.run(cmd, cwd=directory, capture_output=True, text=True)
    if result.returncode != 0:
        raise Exception(result.stderr)
    lines = result.stdout.splitlines()
    return [line.expandtabs() for line in lines]


if __name__ == "__main__":
    main(sys.argv[1:])
