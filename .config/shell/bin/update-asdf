#!/usr/bin/env python
# PYTHON_ARGCOMPLETE_OK

import argparse
import subprocess

import argcomplete
from termcolor import colored


class Asdf:
    """
    https://asdf-vm.com/manage/commands.html
    """

    @staticmethod
    def plugins() -> list[str]:
        result: str = Asdf.run(["asdf", "current"])
        plugins: list[str] = [plugin.split()[0] for plugin in result.splitlines()]
        # Some plugins have complex version names so latest is not supported
        for plugin in ["java"]:
            plugins.remove(plugin)
        return plugins

    @staticmethod
    def current(name: str) -> str:
        result: str = Asdf.run(["asdf", "current", name])
        return result.split()[1]

    @staticmethod
    def latest(name: str) -> str:
        return Asdf.run(["asdf", "latest", name])

    @staticmethod
    def install(name: str, version: str) -> None:
        Asdf.run(["asdf", "install", name, version])

    @staticmethod
    def set_global(name: str, version: str) -> None:
        Asdf.run(["asdf", "global", name, version])

    @staticmethod
    def uninstall(name: str, version: str) -> None:
        Asdf.run(["asdf", "uninstall", name, version])

    @staticmethod
    def run(command: list[str]) -> str:
        result = subprocess.run(command, capture_output=True, text=True)
        if result.returncode == 0:
            return result.stdout.strip()
        else:
            raise Exception(f"{command} failed with {result.stderr.strip()}")


def main(plugins: list[str], update: bool) -> None:
    if update:
        [update_plugin(plugin) for plugin in plugins]
    else:
        max_len: int = max(map(len, plugins))
        [plugin_info(plugin, max_len) for plugin in plugins]


def update_plugin(name: str) -> None:
    current: str = Asdf.current(name)
    latest: str = Asdf.latest(name)
    if current == latest:
        print(f"{name} is already at latest version {latest}")
        return

    upgrade: bool = get_user_input(f"Upgrade {name} from {current} to {latest}?")
    if not upgrade:
        print("Aborting")
        return

    cleanup: bool = get_user_input(f"Uninstall {name} version {current}?")

    print(f"Installing {name} {latest}")
    Asdf.install(name, latest)
    print(f"Setting {name} to {latest}")
    Asdf.set_global(name, latest)

    if cleanup:
        print(f"Uninstalling {name} {current}")
        Asdf.uninstall(name, current)


def get_user_input(prompt: str) -> bool:
    answer = input(f"{prompt} [y]es or [n]o: ")
    if answer.lower() in ["y", "yes"]:
        return True
    elif answer.lower() in ["n", "no"]:
        return False
    else:
        print(f"Invalid value: {answer}")
        return get_user_input(prompt)


def plugin_info(name: str, max_len: int) -> None:
    current: str = Asdf.current(name)
    latest: str = Asdf.latest(name)
    if current == latest:
        print(colored(f"{name:{max_len}} Up to date", "green"))
    else:
        print(colored(f"{name:{max_len}} {current} -> {latest}", "red"))


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Update script for asdf plugins",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument(
        "name",
        nargs="?",
        default="all",
        choices=Asdf.plugins() + ["all"],
        help="Name of plugin to update",
    )
    parser.add_argument(
        "-u",
        "--update",
        action="store_true",
        help="Interactively update instead of printing information",
    )
    argcomplete.autocomplete(parser)
    args = parser.parse_args()
    main(
        plugins=Asdf.plugins() if args.name == "all" else [args.name],
        update=args.update,
    )
