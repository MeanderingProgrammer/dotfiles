#!/usr/bin/env python

import os
import subprocess

import click


@click.command()
@click.option("-n", "--name", is_flag=True, default=False, help="show file names only")
@click.option("-h", "--head", is_flag=True, default=False, help="from head")
@click.option("-p", "--prev", is_flag=True, default=False, help="from previous commit")
@click.option("-r", "--root", is_flag=True, default=False, help="from root branch")
@click.option("-e", "--exclude", is_flag=True, default=True, help="exclude lock files")
@click.option("-d", "--debug", is_flag=True, default=False, help="debug command")
def cli(
    name: bool,
    head: bool,
    prev: bool,
    root: bool,
    exclude: bool,
    debug: bool,
) -> None:
    """git diff (<options>)? (<commit>)? (-- <path>...)?"""

    if sum([head, prev, root]) > 1:
        raise click.UsageError("mutually exclusive: --head, --prev, --root")

    cmd: list[str] = ["git", "diff"]

    if name:
        cmd.append("--name-only")

    commit = get_commit(head, prev, root)
    if commit is not None:
        cmd.append(commit)

    if exclude:
        cmd.append("--")
        cmd.append(".")
        excludes: list[str] = ["Cargo.lock", "lock.json", "lock.yaml"]
        for file in excludes:
            cmd.append(f'":(exclude)*{file}"')

    execute(debug, cmd)


def get_commit(head: bool, prev: bool, root: bool) -> str | None:
    if head:
        return None
    if prev:
        return "HEAD^"
    if root:
        return get_default()

    stats = run(["git", "status", "--short"])
    modified = any([stat[1] != " " for stat in stats])
    if modified:
        return None

    current = single(run(["git", "branch", "--show-current"]), "current branch")
    default = get_default()
    return "HEAD^" if current == default else default


def get_default() -> str:
    result: list[str] = []
    markers: list[str] = ["main", "master"]
    for branch in run(["git", "branch"]):
        # * main    -> main
        #   main    -> main
        # * feature -> feature
        #   feature -> feature
        branch = branch.strip().split()[-1]
        if branch in markers:
            result.append(branch)
    return single(result, f"default {markers}")


def run(cmd: list[str]) -> list[str]:
    result = subprocess.run(cmd, capture_output=True, text=True)
    if result.returncode == 0:
        return result.stdout.splitlines()
    else:
        raise Exception(f"{' '.join(cmd)} failed: {result.stderr.strip()}")


def single(values: list[str], message: str) -> str:
    assert len(values) == 1, f"expected 1 {message}, found {len(values)}"
    return values[0]


def execute(debug: bool, cmd: list[str]) -> None:
    command = " ".join(cmd)
    if debug:
        print(command)
    else:
        os.system(command)


if __name__ == "__main__":
    cli()
