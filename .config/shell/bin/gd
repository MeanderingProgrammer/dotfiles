#!/usr/bin/env python

import enum
import os
import subprocess

import click


class Commit(enum.StrEnum):
    HEAD = "h"
    PREVIOUS = "p"
    CURRENT = "c"
    MAINLINE = "m"

    def resolve(self) -> str:
        match self:
            case Commit.HEAD:
                return "HEAD"
            case Commit.PREVIOUS:
                return "HEAD^"
            case Commit.CURRENT:
                return current()
            case Commit.MAINLINE:
                return mainline()

    @staticmethod
    def default() -> "Commit":
        stats = run(["git", "status", "--short"])
        modified = any([stat[1] != " " for stat in stats])
        if modified:
            return Commit.HEAD
        elif len(stats) > 0:
            return Commit.CURRENT
        elif current() == mainline():
            return Commit.PREVIOUS
        else:
            return Commit.MAINLINE


@click.command()
@click.option("-n", "--name", is_flag=True, default=False, help="show file names only")
@click.option(
    "-c",
    "--commit",
    type=click.Choice(list(Commit)),
    default=Commit.default,
    help="source commit",
)
@click.option("-e", "--exclude", is_flag=True, default=True, help="exclude lock files")
@click.option("-d", "--debug", is_flag=True, default=False, help="debug command")
@click.help_option("-h", "--help")
def cli(name: bool, commit: Commit, exclude: bool, debug: bool) -> None:
    """git diff (<options>)? (<commit>)? (-- <path>...)?"""

    cmd: list[str] = ["git", "diff"]

    if name:
        cmd.append("--name-only")

    cmd.append(commit.resolve())

    if exclude:
        cmd.append("--")
        cmd.append(".")
        excludes: list[str] = ["Cargo.lock", "lock.json", "lock.yaml"]
        for file in excludes:
            cmd.append(f'":(exclude)*{file}"')

    execute(debug, cmd)


def current() -> str:
    results = run(["git", "branch", "--show-current"])
    return single(results, "current branch")


def mainline() -> str:
    results: list[str] = []
    options: list[str] = ["main", "master"]
    for branch in run(["git", "branch"]):
        # * main    -> main
        #   main    -> main
        # * feature -> feature
        #   feature -> feature
        branch = branch.strip().split()[-1]
        if branch in options:
            results.append(branch)
    return single(results, f"mainline {options}")


def run(cmd: list[str]) -> list[str]:
    result = subprocess.run(cmd, capture_output=True, text=True)
    if result.returncode == 0:
        return result.stdout.splitlines()
    else:
        raise Exception(f"{' '.join(cmd)} failed: {result.stderr.strip()}")


def single(values: list[str], message: str) -> str:
    assert len(values) == 1, f"expected 1 {message}, found {len(values)}"
    return values[0]


def execute(debug: bool, cmd: list[str]) -> None:
    command = " ".join(cmd)
    if debug:
        print(command)
    else:
        os.system(command)


if __name__ == "__main__":
    cli()
