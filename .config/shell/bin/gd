#!/usr/bin/env python

import os
import subprocess

import click


@click.command()
@click.option(
    "-p",
    "--previous",
    is_flag=True,
    show_default=True,
    default=False,
    help="show differences against previous commit",
)
@click.option(
    "-n",
    "--name",
    is_flag=True,
    show_default=True,
    default=False,
    help="show file names that have changed",
)
@click.option(
    "-e",
    "--exclude",
    is_flag=True,
    show_default=True,
    default=True,
    help="exclude lock files",
)
@click.option(
    "-d",
    "--debug",
    is_flag=True,
    show_default=True,
    default=False,
    help="debug command",
)
@click.help_option("-h", "--help")
def cli(previous: bool, name: bool, exclude: bool, debug: bool) -> None:
    """git diff"""

    # git diff (<options>)? (<commit>)? (-- <path>...)?
    cmd: list[str] = ["git", "diff"]

    if name:
        cmd.append("--name-only")

    if previous:
        cmd.append("HEAD^")
    else:
        # include root branch if there are no changes
        changes = run(["git", "status", "--porcelain"])
        if len(changes) == 0:
            cmd.append(get_root(["main", "master"]))

    if exclude:
        cmd.append("--")
        cmd.append(".")
        excludes: list[str] = ["Cargo.lock", "lock.json", "lock.yaml"]
        for file in excludes:
            cmd.append(f'":(exclude)*{file}"')

    command = " ".join(cmd)
    if debug:
        print(command)
    else:
        os.system(command)


def get_root(markers: list[str]) -> str:
    result: list[str] = []
    for branch in run(["git", "branch"]):
        # * main    -> main
        #   main    -> main
        # * feature -> feature
        #   feature -> feature
        branch = branch.strip().split()[-1]
        if branch in markers:
            result.append(branch)
    assert len(result) == 1, f"expected 1 root {markers}, found {len(result)}"
    return result[0]


def run(cmd: list[str]) -> list[str]:
    result = subprocess.run(cmd, capture_output=True, text=True)
    if result.returncode == 0:
        return result.stdout.strip().splitlines()
    else:
        raise Exception(f"{cmd} failed due to: {result.stderr.strip()}")


if __name__ == "__main__":
    cli()
