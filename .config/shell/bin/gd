#!/usr/bin/env python

import os
import subprocess

import click


@click.command()
@click.option(
    "-p",
    "--previous",
    is_flag=True,
    show_default=True,
    default=False,
    help="show differences against previous commit",
)
@click.option(
    "-n",
    "--name",
    is_flag=True,
    show_default=True,
    default=False,
    help="show file names that have changed",
)
@click.option(
    "-a",
    "--all",
    is_flag=True,
    show_default=True,
    default=False,
    help="include lock files",
)
@click.option(
    "-d",
    "--debug",
    is_flag=True,
    show_default=True,
    default=False,
    help="debug command",
)
@click.help_option("-h", "--help")
def cli(previous: bool, name: bool, all: bool, debug: bool) -> None:
    """git diff"""

    # git diff [<options>] [<commit>..<commit>] [--] [<path>...]
    cmd: list[str] = ["git", "diff"]

    if name:
        cmd.append("--name-only")

    if previous:
        cmd.append("HEAD^")
    else:
        root = get_root(["main", "master"])
        current = get_current()
        if root != current:
            cmd.append(root)

    if not all:
        cmd.append("--")
        cmd.append(".")
        cmd.append(exclude("Cargo.lock"))
        cmd.append(exclude("lock.json"))
        cmd.append(exclude("lock.yaml"))

    command = " ".join(cmd)
    if debug:
        print(command)
    else:
        os.system(command)


def get_root(markers: list[str]) -> str:
    result: list[str] = []
    for branch in run(["git", "branch"]):
        # * main    -> main
        #   main    -> main
        # * feature -> feature
        #   feature -> feature
        branch = branch.strip().split()[-1]
        if branch in markers:
            result.append(branch)
    assert len(result) == 1, f"expected 1 root {markers}, found {len(result)}"
    return result[0]


def get_current() -> str:
    result = run(["git", "branch", "--show-current"])
    assert len(result) == 1, f"expected 1 current branch, found {len(result)}"
    return result[0]


def run(cmd: list[str]) -> list[str]:
    result = subprocess.run(cmd, capture_output=True, text=True)
    if result.returncode == 0:
        return result.stdout.strip().splitlines()
    else:
        raise Exception(f"{cmd} failed due to: {result.stderr.strip()}")


def exclude(suffix: str) -> str:
    return f'":(exclude)*{suffix}"'


if __name__ == "__main__":
    cli()
