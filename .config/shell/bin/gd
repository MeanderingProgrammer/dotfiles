#!/usr/bin/env python

import os
import subprocess
from enum import StrEnum

import click


class Commit(StrEnum):
    INDEX = "i"
    PREVIOUS = "p"
    CURRENT = "c"
    MAINLINE = "m"

    def resolve(self) -> str | None:
        match self:
            case Commit.INDEX:
                return None
            case Commit.PREVIOUS:
                return "HEAD^"
            case Commit.CURRENT:
                return current()
            case Commit.MAINLINE:
                return mainline()

    @staticmethod
    def default() -> "Commit":
        stats = run(["git", "status", "--short"])
        modified = any([stat[1] != " " for stat in stats])
        if modified:
            return Commit.INDEX
        elif len(stats) > 0:
            return Commit.CURRENT
        elif current() == mainline():
            return Commit.PREVIOUS
        else:
            return Commit.MAINLINE


@click.command()
@click.option("-n", "--name", is_flag=True, default=False, help="show file names only")
@click.option(
    "-c",
    "--commit",
    type=click.Choice(list(Commit)),
    default=Commit.default,
    help="source commit",
)
@click.option("-a", "--all", is_flag=True, default=False, help="include lock files")
@click.option("-d", "--debug", is_flag=True, default=False, help="debug command")
@click.help_option("-h", "--help")
def cli(name: bool, commit: Commit, all: bool, debug: bool) -> None:
    """git diff (<options>)? (<commit>)? (-- <path>...)?"""

    cmd: list[str] = ["git", "diff"]

    if name:
        cmd.append("--name-only")

    value = commit.resolve()
    if value is not None:
        cmd.append(value)

    if not all:
        cmd.append("--")
        cmd.append(".")
        lock_files: list[str] = ["Cargo.lock", "lock.json", "lock.yaml"]
        for file in lock_files:
            cmd.append(f'":(exclude)*{file}"')

    command = " ".join(cmd)
    if debug:
        print(command)
    else:
        os.system(command)


def current() -> str:
    results = run(["git", "branch", "--show-current"])
    assert len(results) == 1, f"expected 1 current branch, found {len(results)}"
    return results[0]


def mainline() -> str:
    branches: list[str] = []
    scores: dict[str, int] = dict(master=1, main=2)
    for branch in run(["git", "branch"]):
        # * main    -> main
        #   main    -> main
        # * feature -> feature
        #   feature -> feature
        branch = branch.strip().split()[-1]
        if branch in scores:
            branches.append(branch)
    # return the mainline branch with the highest score
    assert len(branches) > 0, f"expected at least one mainline branch"
    branches.sort(key=lambda branch: scores[branch])
    return branches.pop()


def run(cmd: list[str]) -> list[str]:
    result = subprocess.run(cmd, capture_output=True, text=True)
    if result.returncode != 0:
        raise Exception(f"{' '.join(cmd)} failed: {result.stderr.strip()}")
    return result.stdout.splitlines()


if __name__ == "__main__":
    cli()
