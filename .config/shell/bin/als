#!/usr/bin/env python
# PYTHON_ARGCOMPLETE_OK

import itertools
import json
from argparse import ArgumentParser
from dataclasses import dataclass
from pathlib import Path
from typing import Optional

import argcomplete


@dataclass(frozen=True)
class Alias:
    name: str
    command: str


@dataclass(frozen=True)
class AliasGroup:
    name: str
    aliases: list[Alias]

    def alias_names(self) -> list[str]:
        return [alias.name for alias in self.aliases]


@dataclass(frozen=True)
class AliasGroups:
    groups: list[AliasGroup]

    def group_names(self) -> list[str]:
        return [group.name.lower() for group in self.groups]

    def alias_names(self) -> list[str]:
        group_aliases: list[list[str]] = [group.alias_names() for group in self.groups]
        return list(itertools.chain.from_iterable(group_aliases))


def get_alias_groups() -> AliasGroups:
    alias_groups: list[AliasGroup] = [
        AliasGroup(
            name="General",
            aliases=[
                Alias(name="reload", command="source ~/.zshrc"),
                Alias(name="ll", command="ls -latr"),
                Alias(name="workspace", command="cd ~/dev/repos"),
                Alias(name="notes", command="cd ~/Documents/notes"),
            ],
        ),
        AliasGroup(
            name="Git",
            aliases=[
                Alias(name="gs", command="git status -uall"),
                Alias(name="gl", command="git log"),
                Alias(name="gp", command="git push"),
                Alias(name="gpl", command="git pull"),
                Alias(name="ga", command="git add --all"),
                Alias(name="gc", command="git commit -m"),
                Alias(name="gb", command="git branch"),
                Alias(name="gac", command="git add --all && git commit --amend"),
                Alias(name="gm", command="git checkout main"),
                Alias(name="gu", command="git branch -u main"),
                Alias(name="gundo", command="git restore ."),
            ],
        ),
        AliasGroup(
            name="Yadm",
            aliases=[
                Alias(name="ys", command="yadm status"),
                Alias(name="yl", command="yadm log"),
                Alias(name="yp", command="yadm push"),
                Alias(name="ypl", command="yadm pull"),
                Alias(name="ya", command="yadm add -u"),
                Alias(name="yc", command="yadm commit -m"),
                Alias(name="yac", command="yadm add ~/.config/"),
                Alias(name="yls", command="yadm ls-files ~"),
                Alias(name="yd", command="yadm diff"),
            ],
        ),
        AliasGroup(
            name="Pass",
            aliases=[
                Alias(name="pas", command="pass git status"),
                Alias(name="pal", command="pass git log"),
                Alias(name="pap", command="pass git push"),
                Alias(name="papl", command="pass git pull"),
            ],
        ),
        AliasGroup(
            name="Advent",
            aliases=[
                Alias(name="a_build", command="./scripts/advent.py build"),
                Alias(name="a_run", command="./scripts/advent.py run"),
                Alias(name="a_gen", command="./scripts/advent.py generate"),
                Alias(name="a_graph", command="./scripts/advent.py graph"),
            ],
        ),
    ]
    result = AliasGroups(groups=alias_groups)
    groups: list[str] = result.group_names()
    assert len(groups) == len(set(groups)), f"Duplicate group in: {groups}"
    aliases: list[str] = result.alias_names()
    assert len(aliases) == len(set(aliases)), f"Duplicate alias in: {aliases}"
    return result


def main(
    groups: AliasGroups,
    alias: Optional[str],
    group: Optional[str],
    update: bool,
) -> None:
    if update:
        assert alias is None, "Cannot specify alias when updating"
        assert group is None, "Cannot specify group when updating"
        overwrite(groups)
    elif alias is not None:
        assert group is None, "Cannot specify group and alias"
        print_alias(groups, alias)
    else:
        print_groups(groups, group)


def overwrite(groups: AliasGroups) -> None:
    lines: list[str] = []
    for group in groups.groups:
        lines.append(f"# {group.name}")
        for alias in group.aliases:
            lines.append(f'alias {alias.name}="{alias.command}"')
        lines.append("")
    alias_file = Path.home().joinpath(".config/shell/aliases.sh")
    alias_file.write_text("\n".join(lines))
    print(f"Successfully updated {alias_file}")


def print_alias(groups: AliasGroups, target_alias: str) -> None:
    commands: list[str] = []
    for group in groups.groups:
        for alias in group.aliases:
            if alias.name == target_alias:
                commands.append(alias.command)
    assert len(commands) == 1, f"Expected one matching alias found {len(commands)}"
    print(f"{target_alias}: {commands[0]}")


def print_groups(groups: AliasGroups, target_group: Optional[str]) -> None:
    result: dict[str, dict[str, str]] = dict()
    for group in groups.groups:
        result[group.name.lower()] = {
            alias.name: alias.command for alias in group.aliases
        }
    value: dict = result if target_group is None else result[target_group]
    print(json.dumps(value, indent=2))


if __name__ == "__main__":
    parser = ArgumentParser(description="Print or update custom aliases")
    groups: AliasGroups = get_alias_groups()
    parser.add_argument(
        "-g",
        "--group",
        choices=groups.group_names(),
        help="Alias group to print information about",
    )
    parser.add_argument(
        "-a",
        "--alias",
        choices=groups.alias_names(),
        help="Alias to print information about",
    )
    parser.add_argument(
        "-u",
        "--update",
        action="store_true",
        help="Update aliases instead of printing them out",
    )
    argcomplete.autocomplete(parser)
    args = parser.parse_args()
    main(groups, args.alias, args.group, args.update)
