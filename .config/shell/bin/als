#!/usr/bin/env python
# PYTHON_ARGCOMPLETE_OK

import json
from argparse import ArgumentParser
from dataclasses import dataclass
from pathlib import Path
from typing import Optional

import argcomplete


@dataclass(frozen=True)
class Alias:
    name: str
    command: str


@dataclass(frozen=True)
class AliasGroup:
    name: str
    aliases: list[Alias]


ALIAS_GROUPS: list[AliasGroup] = [
    AliasGroup(
        name="General",
        aliases=[
            Alias(name="reload", command="source ~/.zshrc"),
            Alias(name="ll", command="ls -latr"),
            Alias(name="workspace", command="cd ~/dev/repos"),
            Alias(name="notes", command="cd ~/Documents/notes"),
        ],
    ),
    AliasGroup(
        name="Git",
        aliases=[
            Alias(name="gs", command="git status -uall"),
            Alias(name="gl", command="git log"),
            Alias(name="gb", command="git branch"),
            Alias(name="ga", command="git add --all"),
            Alias(name="gc", command="git commit -m"),
            Alias(name="gp", command="git push"),
            Alias(name="gm", command="git checkout main"),
            Alias(name="gu", command="git branch -u main"),
            Alias(name="gac", command="git add --all && git commit --amend"),
        ],
    ),
    AliasGroup(
        name="Yadm",
        aliases=[
            Alias(name="yls", command="yadm ls-files ~"),
            Alias(name="ys", command="yadm status"),
            Alias(name="yd", command="yadm diff"),
            Alias(name="yl", command="yadm l"),
            Alias(name="ya", command="yadm add -u"),
            Alias(name="yc", command="yadm com"),
            Alias(name="yp", command="yadm push"),
        ],
    ),
    AliasGroup(
        name="Advent",
        aliases=[
            Alias(name="a_run", command="./scripts/advent.py run"),
            Alias(name="a_gen", command="./scripts/advent.py generate"),
        ],
    ),
]


def main(group: Optional[str], update: bool) -> None:
    overwrite() if update else pretty_print(group)


def overwrite() -> None:
    lines = []
    for group in ALIAS_GROUPS:
        lines.append(f"# {group.name}")
        for alias in group.aliases:
            lines.append(f'alias {alias.name}="{alias.command}"')
        lines.append("")
    alias_file = Path.home().joinpath(".config/shell/aliases.sh")
    alias_file.write_text("\n".join(lines))
    print(f"Successfully updated {alias_file}")


def pretty_print(target_group: Optional[str]) -> None:
    result = dict()
    for group in ALIAS_GROUPS:
        group_result = dict()
        for alias in group.aliases:
            group_result[alias.name] = alias.command
        result[group.name.lower()] = group_result
    value = result if target_group is None else result[target_group]
    print(json.dumps(value, indent=2))


if __name__ == "__main__":
    parser = ArgumentParser(description="Print or update custom aliases")
    parser.add_argument(
        "--group",
        choices=[group.name.lower() for group in ALIAS_GROUPS],
        help="Alias group to print information about",
    )
    parser.add_argument(
        "--update",
        action="store_true",
        help="Update aliases instead of printing them out",
    )
    argcomplete.autocomplete(parser)
    args = parser.parse_args()
    main(args.group, args.update)
