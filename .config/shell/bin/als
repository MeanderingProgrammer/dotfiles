#!/usr/bin/env python
# PYTHON_ARGCOMPLETE_OK

import json
from argparse import ArgumentParser
from dataclasses import dataclass
from pathlib import Path
from typing import Optional

import argcomplete


@dataclass(frozen=True)
class Alias:
    name: str
    command: str

    def to_bash(self) -> str:
        return f'alias {self.name}="{self.command}"'


@dataclass(frozen=True)
class AliasGroup:
    name: str
    aliases: list[Alias]

    def to_bash(self) -> list[str]:
        comment: str = f"# {self.name}"
        bash_aliases: list[str] = [alias.to_bash() for alias in self.aliases]
        return [comment] + bash_aliases

    def to_dict(self) -> dict[str, str]:
        return {alias.name: alias.command for alias in self.aliases}


def main(group: Optional[str], update: bool) -> None:
    if update:
        assert group is None, "Cannot specify group when updating"
        overwrite()
    else:
        pretty_print(group)


def overwrite() -> None:
    lines: list[str] = []
    for group in get_alias_groups():
        lines.extend(group.to_bash())
        lines.append("")
    alias_file = Path.home().joinpath(".config/shell/aliases.sh")
    alias_file.write_text("\n".join(lines))
    print(f"Successfully updated {alias_file}")


def pretty_print(target_group: Optional[str]) -> None:
    result: dict[str, dict[str, str]] = {
        group.name.lower(): group.to_dict() for group in get_alias_groups()
    }
    value: dict = result if target_group is None else result[target_group]
    print(json.dumps(value, indent=2))


def get_alias_groups() -> list[AliasGroup]:
    return [
        AliasGroup(
            name="General",
            aliases=[
                Alias(name="reload", command="source ~/.zshrc"),
                Alias(name="ll", command="ls -latr"),
                Alias(name="workspace", command="cd ~/dev/repos"),
                Alias(name="notes", command="cd ~/Documents/notes"),
            ],
        ),
        AliasGroup(
            name="Git",
            aliases=[
                Alias(name="gs", command="git status -uall"),
                Alias(name="gl", command="git log"),
                Alias(name="gp", command="git push"),
                Alias(name="gpl", command="git pull"),
                Alias(name="ga", command="git add --all"),
                Alias(name="gc", command="git commit -m"),
                Alias(name="gb", command="git branch"),
                Alias(name="gm", command="git checkout main"),
                Alias(name="gu", command="git branch -u main"),
                Alias(name="gac", command="git add --all && git commit --amend"),
                Alias(name="gundo", command="git restore ."),
            ],
        ),
        AliasGroup(
            name="Yadm",
            aliases=[
                Alias(name="ys", command="yadm status"),
                Alias(name="yl", command="yadm log"),
                Alias(name="yp", command="yadm push"),
                Alias(name="ypl", command="yadm pull"),
                Alias(name="ya", command="yadm add -u"),
                Alias(name="yc", command="yadm commit -m"),
                Alias(name="yls", command="yadm ls-files ~"),
                Alias(name="yd", command="yadm diff"),
            ],
        ),
        AliasGroup(
            name="Pass",
            aliases=[
                Alias(name="pas", command="pass git status"),
                Alias(name="pal", command="pass git log"),
                Alias(name="pap", command="pass git push"),
                Alias(name="papl", command="pass git pull"),
            ],
        ),
        AliasGroup(
            name="Advent",
            aliases=[
                Alias(name="a_setup", command="./scripts/advent.py setup"),
                Alias(name="a_run", command="./scripts/advent.py run"),
                Alias(name="a_gen", command="./scripts/advent.py generate"),
                Alias(name="a_graph", command="./scripts/advent.py graph"),
            ],
        ),
    ]


if __name__ == "__main__":
    parser = ArgumentParser(description="Print or update custom aliases")
    parser.add_argument(
        "-g",
        "--group",
        choices=[group.name.lower() for group in get_alias_groups()],
        help="Alias group to print information about",
    )
    parser.add_argument(
        "-u",
        "--update",
        action="store_true",
        help="Update aliases instead of printing them out",
    )
    argcomplete.autocomplete(parser)
    args = parser.parse_args()
    main(args.group, args.update)
