#!/usr/bin/env python
# PYTHON_ARGCOMPLETE_OK

from argparse import ArgumentParser
from dataclasses import dataclass
from pathlib import Path

import argcomplete
import pyautogui
from PIL import ImageGrab

# MacOS Dock aligned to the right, causes horizontal split offset
DOCK_WIDTH: int = 90
# MacOS top menu + Terminal application header
TOP_BAR_HEIGHT: int = 53

ULTRAWIDE: tuple[int, int] = (5120, 1440)
LAPTOP: tuple[int, int] = (1728, 1117)


@dataclass(frozen=True)
class Region:
    """
    All values are assumed to be a percentage with the fill width and height
    """

    left: int
    width: int
    top: int
    height: int

    def from_total(self, width: int, height: int) -> tuple[int, int, int, int]:
        left: int = int(self.left * (width / 100))
        right: int = left + int(self.width * (width / 100))

        top: int = int(self.top * (height / 100)) + TOP_BAR_HEIGHT
        bottom: int = top + int(self.height * (height / 100))

        return (left, top, right, bottom)


NAME_MAPPING: dict[str, dict[tuple[int, int], Region]] = dict(
    dashboard={
        ULTRAWIDE: Region(left=15, width=20, top=20, height=50),
        LAPTOP: Region(left=20, width=60, top=15, height=65),
    },
    markdown={
        ULTRAWIDE: Region(left=0, width=15, top=0, height=50),
        LAPTOP: Region(left=0, width=40, top=1, height=70),
    },
)


def main(name: str) -> None:
    """
    Needs to run on supported display for region
    Assumes we are trying to screenshot a terminal which is in top left
    """
    target_mapping: dict[tuple[int, int], Region] = NAME_MAPPING[name]

    size = pyautogui.size()
    display_size: tuple[int, int] = (size.width, size.height)
    assert display_size in target_mapping, f"Unsupported display size: {display_size}"
    target: Region = target_mapping[display_size]

    region = target.from_total(
        width=display_size[0] - DOCK_WIDTH,
        height=display_size[1] - TOP_BAR_HEIGHT,
    )

    screenshot = ImageGrab.grab(region)
    screenshot.save(Path.home().joinpath("Desktop/screenshot.png"))


if __name__ == "__main__":
    parser = ArgumentParser(description="Takes screenshot within a region")
    parser.add_argument(
        "name",
        nargs="?",
        default="dashboard",
        choices=NAME_MAPPING.keys(),
        help="Name of region to screenshot",
    )
    argcomplete.autocomplete(parser)
    args = parser.parse_args()
    main(args.name)
