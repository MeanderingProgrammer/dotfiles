#!/usr/bin/env python

from argparse import ArgumentParser
from dataclasses import dataclass
from pathlib import Path
from PIL import ImageGrab
from typing import Self, Tuple

TYPE_MAPPING = dict(
    dashboard=(850, 450),
)


@dataclass(frozen=True)
class BoundBox:
    left: int
    top: int
    right: int
    bottom: int

    def center(self, target: Tuple[int, int]) -> Self:
        offset = (
            BoundBox._offset(self.left, self.right, target[0]),
            BoundBox._offset(self.top, self.bottom, target[1]),
        )
        return type(self)(
            left=offset[0],
            top=offset[1],
            right=offset[0] + target[0],
            bottom=offset[1] + target[1],
        )

    def as_tuple(self) -> Tuple[int, int, int, int]:
        return (self.left, self.top, self.right, self.bottom)

    @staticmethod
    def _offset(start: int, end: int, inner: int) -> int:
        offset = (end - start - inner) / 2
        return int(offset) + start


def main(target: Tuple[int, int]) -> None:
    # Accounts for some lost pixels at bottom of screen
    bottom_offset = 150
    display_size = ImageGrab.grab().size
    display_bound = BoundBox(
        left=0,
        top=0,
        right=display_size[0],
        bottom=display_size[1] - bottom_offset,
    )
    region = display_bound.center(target)
    screenshot = ImageGrab.grab(region.as_tuple())
    screenshot.save(Path.home().joinpath("Desktop/screenshot.png"))


if __name__ == "__main__":
    parser = ArgumentParser(
        description="Takes a screenshot within a region based on type"
    )
    parser.add_argument("--type", choices=TYPE_MAPPING.keys(), default="dashboard")
    args = parser.parse_args()
    main(TYPE_MAPPING[args.type])
