#!/usr/bin/env python
# PYTHON_ARGCOMPLETE_OK

from argparse import ArgumentParser
from dataclasses import dataclass
from pathlib import Path

import argcomplete
from PIL import ImageGrab

# MacOS Dock aligned to the right, causes horizontal split offset
DOCK_WIDTH: int = 90
# MacOS top menu + Terminal application header
TOP_BAR_HEIGHT: int = 53


@dataclass(frozen=True)
class Region:
    """
    All values are assumed to be a percentage with the fill width and height
    """

    left: int
    width: int
    top: int
    height: int

    def from_total(self, width: int, height: int) -> tuple[int, int, int, int]:
        left: int = int(self.left * (width / 100))
        right: int = left + int(self.width * (width / 100))

        top: int = int(self.top * (height / 100)) + TOP_BAR_HEIGHT
        bottom: int = top + int(self.height * (height / 100))

        return (left, top, right, bottom)


TYPE_MAPPING: dict[str, Region] = dict(
    dashboard=Region(left=30, width=40, top=20, height=50),
    markdown=Region(left=0, width=25, top=0, height=50),
)


def main(target: Region) -> None:
    """
    Needs to run on large display: 5120 x 1440
    Assumes we are trying to screenshot a terminal, which is in top
    left and occupies half the screen width
    """
    display_size = ImageGrab.grab().size
    assert display_size == (5120, 1440)

    width = (display_size[0] - DOCK_WIDTH) // 2
    height = display_size[1] - TOP_BAR_HEIGHT

    region = target.from_total(width, height)

    screenshot = ImageGrab.grab(region)
    screenshot.save(Path.home().joinpath("Desktop/screenshot.png"))


if __name__ == "__main__":
    parser = ArgumentParser(description="Takes screenshot within a region")
    parser.add_argument("type", choices=TYPE_MAPPING.keys(), default="dashboard")
    argcomplete.autocomplete(parser)
    args = parser.parse_args()
    main(TYPE_MAPPING[args.type])
